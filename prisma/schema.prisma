generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(cuid())
  email                 String         @unique
  password              String?
  name                  String
  phone                 String?        @unique
  role                  UserRole       @default(PATIENT)
  emailVerified         DateTime?
  phoneVerified         Boolean        @default(false)
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  accounts              Account[]
  appointmentsAsPatient Appointment[]  @relation("PatientAppointments")
  doctorProfile         Doctor?
  notifications         Notification[]
  patientProfile        Patient?
  payments              Payment[]
  reviews               Review[]
  sessions              Session[]

  @@map("users")
}

model Patient {
  id               String    @id @default(cuid())
  userId           String    @unique
  dateOfBirth      DateTime?
  gender           String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  emergencyContact String?
  emergencyPhone   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patients")
}

model Doctor {
  id                    String             @id @default(cuid())
  userId                String             @unique
  profileImage          String?
  specialty             String
  licenseNumber         String?
  bio                   String?
  address               String?
  city                  String
  state                 String
  zipCode               String?
  acceptsInPerson       Boolean            @default(true)
  acceptsVirtual        Boolean            @default(false)
  acceptsHomeVisits     Boolean            @default(false)
  priceInPerson         Int?
  priceVirtual          Int?
  priceHomeVisit        Int?
  firstConsultationFree Boolean            @default(false)
  videoCallLink         String?
  workingHours          Json?
  durationInPerson      Int                @default(30)
  durationVirtual       Int                @default(30)
  durationHomeVisit     Int                @default(60)
  averageRating         Float              @default(0)
  totalReviews          Int                @default(0)
  totalAppointments     Int                @default(0)
  isVerified            Boolean            @default(false)
  isAvailable           Boolean            @default(true)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  appointments          Appointment[]
  blockedDays           DoctorBlockedDay[]
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews               Review[]

  @@map("doctors")
}

model DoctorBlockedDay {
  id        String   @id @default(cuid())
  doctorId  String
  date      DateTime
  reason    String?
  createdAt DateTime @default(now())
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, date])
  @@map("doctor_blocked_days")
}

model Appointment {
  id                 String            @id @default(cuid())
  patientId          String
  doctorId           String
  type               ConsultationType
  scheduledAt        DateTime
  duration           Int
  status             AppointmentStatus @default(PENDING)
  price              Int
  paymentId          String?           @unique
  notes              String?
  patientNotes       String?
  doctorNotes        String?
  patientPhone       String
  patientEmail       String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  cancelledAt        DateTime?
  cancellationReason String?
  doctor             Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient            User              @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  payment            Payment?          @relation(fields: [paymentId], references: [id])
  review             Review?

  @@map("appointments")
}

model Review {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  patientId     String
  doctorId      String
  rating        Int
  comment       String?
  isVisible     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  doctor        Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient       User        @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  appointmentId   String?       @unique
  amount          Int
  currency        String        @default("MXN")
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?       @unique
  stripeSessionId String?       @unique
  refundAmount    Int?
  refundReason    String?
  refundedAt      DateTime?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  appointment     Appointment?
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  sentAt    DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model MexicanState {
  id     String        @id @default(cuid())
  name   String        @unique
  code   String        @unique
  cities MexicanCity[]

  @@map("mexican_states")
}

model MexicanCity {
  id      String       @id @default(cuid())
  name    String
  stateId String
  state   MexicanState @relation(fields: [stateId], references: [id])

  @@unique([name, stateId])
  @@map("mexican_cities")
}

model MedicalSpecialty {
  id   String @id @default(cuid())
  name String @unique

  @@map("medical_specialties")
}

model MexicanHoliday {
  id          String   @id @default(cuid())
  name        String
  date        DateTime @unique
  isNational  Boolean  @default(true)
  description String?

  @@map("mexican_holidays")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum ConsultationType {
  IN_PERSON
  VIRTUAL
  HOME_VISIT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CARD
  OXXO
  SPEI
}

enum NotificationType {
  EMAIL
  SMS
  WHATSAPP
}
